name: End to End Cypress Test

on:
  push:
    branches:
      - zango_setup_for_cypress
    # paths:
    #   - "frontend/**"

jobs:
  cypress-run:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Set up python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 3: Start up environment variables
      - name: Set up environment variables
        run: |
          echo "
            PLATFORM_USERNAME=platform_admin@zango.dev
            PLATFORM_USER_PASSWORD=Zango@123
            PROJECT_NAME=zango_project
            POSTGRES_USER=zango_admin
            POSTGRES_PASSWORD=zangopass
            POSTGRES_DB=zango
            POSTGRES_HOST=postgres
            POSTGRES_PORT=5432
            REDIS_HOST=redis
            REDIS_PORT=6379
            PLATFORM_DOMAIN_URL=localhost
          ">>.env
      
      # Step 4: Start zango project server
      - name: Start Zango project server
        run: |
          export HOST_UID=$(id -u)
          export HOST_GID=$(id -g)
          DOCKER_BUILDKIT=0 docker-compose -f deploy/docker_compose.test.yml up --build -d

      # Step 5: Map localhost to domain
      - name: Setup local domain
        run: echo '0.0.0.0  test.zango.local' | sudo tee -a /etc/hosts
      
      # Step 6: Verify zango project is up and running
      - name: Verify zango project is up and running
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -L http://localhost:8000/platform)
          if [ "$RESPONSE" -eq 200 ]; then
            echo "Backend is up and running at http://localhost:8000"
          else
            echo "Backend is not responding as expected. HTTP response code: $RESPONSE" >&2
            exit 1
          fi
        
      # Step 6: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Step 7: Install dependencies
      - name: Install cypress dependencies
        run: npm install
        working-directory: e2e-tests
      
      # Step 8: Run Cypress tests and record results
      - name: Run Cypress tests
        uses: cypress-io/github-action@v6.5.0
        with:
          working-directory: e2e-tests
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      # Step 9: Generate Cucumber HTML Report
      - name: Generate Cucumber HTML Report
        run: node cucumber-html-report.js
        working-directory: e2e-tests

      # Step 10: Upload Cypress screenshots on failure
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: e2e-tests/cypress/screenshots
          if-no-files-found: ignore

      # Step 11: Upload Cypress videos
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v3
        with:
          name: cypress-videos
          path: e2e-tests/cypress/videos
          if-no-files-found: ignore

      # Step 12: Upload Cucumber HTML Report
      - name: Upload Cucumber HTML Report
        uses: actions/upload-artifact@v3
        with:
          name: cucumber-html-report
          path: e2e-tests/cucumber-html-report.html
          if-no-files-found: ignore